- So I just learned about Google API discovery service, and its JSON
  format. In light of that, perhaps wffi be split into two pieces:

  - Something that parses markdown into the Google API JSON format.
    I think this could be more lightweight for simple web services.

  - An "FFI" for Racket that keys off the GAPI JSON format (whether
    that comes directly from Google for one of their services, or a
    3rd party using that format, or from the markdown parser).

- Finish fleshing out the Imgur, G+, and last.fm services in examples/

- Query parameters may be duplicated -- ex:
  http://developer.musicmetric.com/sentiment.html. Huh. Should handle
  same as http/head's heads-string->dict and heads-dict->string handle
  it. To store multi values for one key in the dict, separate them
  with \n?  Or, just say in that case that the dict must be an
  association list, which is a type of dict that _can_ handle multi
  keys?

- Try doing some services that require authentication.

- Try some AWS services with an Authorization header that requires
  calculating a signature based on other request elements. Allow a
  dict value to be a `lambda`, which is called with the dictionary
  after all non-lambda values are present??

- Currently the `.md` files are needed at runtime, and parsed at
  runtime. Is this a feature or a bug? If a bug, how to handle:

  - Is it possible do all this at the macro stage?

  - Should there be a `#lang wffi`?  (Only downside is putting a first
    #lang line changes this to be Racket-specific instead of
    universal.)

- Woolly ideas:

  - The markdown files could be shared as "recipes" ala Homebrew?

  - Should a JSON parse live on servers to be retrieved
    programatically?
